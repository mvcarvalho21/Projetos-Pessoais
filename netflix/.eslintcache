[{"C:\\Git\\netflix\\src\\index.js":"1","C:\\Git\\netflix\\src\\App.js":"2","C:\\Git\\netflix\\src\\Tmdb.js":"3","C:\\Git\\netflix\\src\\components\\MovieRow.js":"4","C:\\Git\\netflix\\src\\components\\FeatureMovie.js":"5","C:\\Git\\netflix\\src\\components\\Header.js":"6"},{"size":197,"mtime":1612108349387,"results":"7","hashOfConfig":"8"},{"size":2205,"mtime":1612108341863,"results":"9","hashOfConfig":"8"},{"size":2436,"mtime":1612108358884,"results":"10","hashOfConfig":"8"},{"size":1683,"mtime":1612108327935,"results":"11","hashOfConfig":"8"},{"size":1766,"mtime":1612108741966,"results":"12","hashOfConfig":"8"},{"size":646,"mtime":1612108314678,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"wtnm43",{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"16"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22","usedDeprecatedRules":"16"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"16"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"16"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31"},"C:\\Git\\netflix\\src\\index.js",[],["32","33"],"C:\\Git\\netflix\\src\\App.js",["34"],"import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport Tmdb from \"./Tmdb\";\nimport MovieRow from \"./components/MovieRow\";\nimport FeatureMovie from \"./components/FeatureMovie\";\nimport Header from \"./components/Header\";\n\nexport default () => {\n  const [movieList, setMovieList] = useState([]);\n  const [featureData, setFeatureData] = useState(null);\n  const [blackHeader, setBlackHeader] = useState(false);\n\n  useEffect(() => {\n    const loadAll = async () => {\n      //Pegando a lista total\n      let list = await Tmdb.getHomeList();\n      setMovieList(list);\n\n      //Pegando o feature\n      let originals = list.filter((i) => i.slug === \"originals\");\n      let randomChosen = Math.floor(\n        Math.random() * (originals[0].items.results.length - 1)\n      );\n      let chosen = originals[0].items.results[randomChosen];\n      let chosenInfo = await Tmdb.getMovieInfo(chosen.id, \"tv\");\n      setFeatureData(chosenInfo);\n    };\n\n    loadAll();\n  }, []);\n\n  useEffect(() => {\n    const scrollListener = () => {\n      if (window.scrollY > 10) {\n        setBlackHeader(true);\n      } else {\n        setBlackHeader(false);\n      }\n    };\n\n    window.addEventListener(\"scroll\", scrollListener);\n\n    return () => {\n      window.removeEventListener(\"scroll\", scrollListener);\n    };\n  }, []);\n\n  return (\n    <div className=\"page\">\n      <Header black={blackHeader} />\n\n      {featureData && <FeatureMovie item={featureData} />}\n\n      <section className=\"lists\">\n        {movieList.map((item, key) => (\n          <MovieRow key={key} title={item.title} items={item.items} />\n        ))}\n      </section>\n\n      <footer>\n        Feito com{\" \"}\n        <span role=\"img\" aria-label=\"coraÃ§Ã£o\">\n          ðŸ§¡\n        </span>{\" \"}\n        por Marco Carvalho\n        <br />\n        Direitos de imagem para Netflix\n        <br />\n        Dados pegos do site Themoviedb.org\n        <br />\n      </footer>\n\n      {movieList.length <= 0 && (\n        <div className=\"loading\">\n          <img\n            src=\"https://media.wired.com/photos/592744d3f3e2356fd800bf00/master/w_2560%2Cc_limit/Netflix_LoadTime.gif\"\n            alt=\"Carregando\"\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n","C:\\Git\\netflix\\src\\Tmdb.js",["35"],"const API_KEY = \"688b64503b4ebc8435ccfd3739440f8b\";\r\nconst API_BASE = \"https://api.themoviedb.org/3\";\r\n\r\nconst basicFetch = async (endpoint) => {\r\n  const req = await fetch(`${API_BASE}${endpoint}`);\r\n  const json = await req.json();\r\n  return json;\r\n};\r\n\r\nexport default {\r\n  getHomeList: async () => {\r\n    return [\r\n      {\r\n        slug: \"originals\",\r\n        title: \"Originais Netflix\",\r\n        items: await basicFetch(\r\n          `/discover/tv?with_network=213&language=pt-BR&api_key=${API_KEY}`\r\n        ),\r\n      },\r\n      {\r\n        slug: \"trending\",\r\n        title: \"Recomendados para vocÃª\",\r\n        items: await basicFetch(\r\n          `/trending/all/week?language=pt-BR&api_key=${API_KEY}`\r\n        ),\r\n      },\r\n      {\r\n        slug: \"toprated\",\r\n        title: \"Em alta\",\r\n        items: await basicFetch(\r\n          `/movie/top_rated?language=pt-BR&api_key=${API_KEY}`\r\n        ),\r\n      },\r\n      {\r\n        slug: \"action\",\r\n        title: \"AÃ§Ã£o\",\r\n        items: await basicFetch(\r\n          `/discover/movie?with_genres=28&language=pt-BR&api_key=${API_KEY}`\r\n        ),\r\n      },\r\n      {\r\n        slug: \"comedy\",\r\n        title: \"ComÃ©dia\",\r\n        items: await basicFetch(\r\n          `/discover/movie?with_genres=35&language=pt-BR&api_key=${API_KEY}`\r\n        ),\r\n      },\r\n      {\r\n        slug: \"horror\",\r\n        title: \"Terror\",\r\n        items: await basicFetch(\r\n          `/discover/movie?with_genres=27&language=pt-BR&api_key=${API_KEY}`\r\n        ),\r\n      },\r\n      {\r\n        slug: \"romance\",\r\n        title: \"Romance\",\r\n        items: await basicFetch(\r\n          `/discover/movie?with_genres=10749&language=pt-BR&api_key=${API_KEY}`\r\n        ),\r\n      },\r\n      {\r\n        slug: \"documentary\",\r\n        title: \"Documentarios\",\r\n        items: await basicFetch(\r\n          `/discover/movie?with_genres=99&language=pt-BR&api_key=${API_KEY}`\r\n        ),\r\n      },\r\n    ];\r\n  },\r\n  getMovieInfo: async (movieId, type) => {\r\n    let info = {};\r\n    if (movieId) {\r\n      switch (type) {\r\n        case \"movie\":\r\n          info = await basicFetch(\r\n            `/movie/${movieId}?language=pt-BR&api_key=${API_KEY}`\r\n          );\r\n          break;\r\n        case \"tv\":\r\n          info = await basicFetch(\r\n            `/tv/${movieId}?language=pt-BR&api_key=${API_KEY}`\r\n          );\r\n          break;\r\n        default:\r\n          info = null;\r\n          break;\r\n      }\r\n    }\r\n\r\n    return info;\r\n  },\r\n};\r\n","C:\\Git\\netflix\\src\\components\\MovieRow.js",["36"],"import React, { useState } from \"react\";\r\nimport \"./MovieRow.css\";\r\nimport NavigateBeforeIcon from \"@material-ui/icons/NavigateBefore\";\r\nimport NavigateNextIcon from \"@material-ui/icons/NavigateNext\";\r\n\r\nexport default ({ title, items }) => {\r\n  const [scrollX, setScrollX] = useState(-400);\r\n  const handleLeftArrow = () => {\r\n    let x = scrollX + Math.round(window.innerWidth / 2);\r\n    if (x > 0) {\r\n      x = 0;\r\n    }\r\n    setScrollX(x);\r\n  };\r\n\r\n  const handleRightArrow = () => {\r\n    let x = scrollX - Math.round(window.innerWidth / 2);\r\n    let listW = items.results.length * 150;\r\n    if (window.innerWidth - listW > x) {\r\n      x = window.innerWidth - listW - 60;\r\n    }\r\n    setScrollX(x);\r\n  };\r\n\r\n  return (\r\n    <div className=\"movieRow\">\r\n      <h2>{title}</h2>\r\n      <div className=\"movieRow--left\" onClick={handleLeftArrow}>\r\n        <NavigateBeforeIcon style={{ fontSize: 50 }} />\r\n      </div>\r\n\r\n      <div className=\"movieRow--right\" onClick={handleRightArrow}>\r\n        <NavigateNextIcon style={{ fontSize: 50 }} />\r\n      </div>\r\n\r\n      <div className=\"movieRow--listarea\">\r\n        <div\r\n          className=\"movieRow--list\"\r\n          style={{\r\n            marginLeft: scrollX,\r\n            width: items.results.length * 150,\r\n          }}\r\n        >\r\n          {items.results.length > 0 &&\r\n            items.results.map((item, key) => (\r\n              <div key={key} className=\"movieRow--item\">\r\n                <img\r\n                  src={`https://image.tmdb.org/t/p/w300${item.poster_path}`}\r\n                  alt={item.original_title}\r\n                />\r\n              </div>\r\n            ))}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","C:\\Git\\netflix\\src\\components\\FeatureMovie.js",["37"],"import React from \"react\";\r\nimport \"./FeatureMovie.css\";\r\n\r\nexport default ({ item }) => {\r\n  let firstDate = new Date(item.first_air_date);\r\n  let genres = [];\r\n  for (let i in item.genres) {\r\n    genres.push(item.genres[i].name);\r\n  }\r\n\r\n  let description = item.overview;\r\n  if (description.length > 200) {\r\n    description = description.substring(0, 200) + \"...\";\r\n  }\r\n\r\n  return (\r\n    <section\r\n      className=\"featured\"\r\n      style={{\r\n        backgroundSize: \"cover\",\r\n        backgroundPosition: \"center\",\r\n        backgroundImage: `url(https://image.tmdb.org/t/p/original${item.backdrop_path})`,\r\n      }}\r\n    >\r\n      <div className=\"featured--vertical\">\r\n        <div className=\"featured--horizontal\">\r\n          <div className=\"featured--name\">{item.original_name}</div>\r\n          <div className=\"featured--info\">\r\n            <div className=\"featured--points\">{item.vote_average} pontos</div>\r\n            <div className=\"featured--year\">{firstDate.getFullYear()}</div>\r\n            <div className=\"featured--seasons\">\r\n              {item.number_of_seasons} temporada\r\n              {item.number_of_seasons !== 1 ? \"s\" : \"\"}\r\n            </div>\r\n          </div>\r\n          <div className=\"featured--description\">{description}</div>\r\n          <div className=\"featured--buttons\">\r\n            <a href={`/watch/${item.id}`} className=\"featured--watchbutton\">\r\n              â–º Assistir\r\n            </a>\r\n            <a href={`/list/add/${item.id}`} className=\"featured--mylistbutton\">\r\n              + Minha Lista\r\n            </a>\r\n          </div>\r\n          <div className=\"featured--genres\">\r\n            <strong>GÃªneros: </strong>\r\n            {genres.join(\", \")}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n","C:\\Git\\netflix\\src\\components\\Header.js",["38"],"import React from \"react\";\r\nimport \"./Header.css\";\r\n\r\nexport default ({ black }) => {\r\n  return (\r\n    <header className={black ? \"black\" : \"\"}>\r\n      <div className=\"header--logo\">\r\n        <a href=\"/\">\r\n          <img\r\n            src=\"https://upload.wikimedia.org/wikipedia/commons/0/08/Netflix_2015_logo.svg\"\r\n            alt=\"Netflix\"\r\n          />\r\n        </a>\r\n      </div>\r\n      <div className=\"header--user\">\r\n        <a href=\"/\">\r\n          <img\r\n            src=\"https://i.pinimg.com/564x/0d/dc/ca/0ddccae723d85a703b798a5e682c23c1.jpg\"\r\n            alt=\"UsuÃ¡rio\"\r\n          />\r\n        </a>\r\n      </div>\r\n    </header>\r\n  );\r\n};\r\n",{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","severity":1,"message":"44","line":8,"column":1,"nodeType":"45","endLine":83,"endColumn":3},{"ruleId":"43","severity":1,"message":"46","line":10,"column":1,"nodeType":"45","endLine":93,"endColumn":3},{"ruleId":"43","severity":1,"message":"44","line":6,"column":1,"nodeType":"45","endLine":57,"endColumn":3},{"ruleId":"43","severity":1,"message":"44","line":4,"column":1,"nodeType":"45","endLine":53,"endColumn":3},{"ruleId":"43","severity":1,"message":"44","line":4,"column":1,"nodeType":"45","endLine":25,"endColumn":3},"no-native-reassign",["47"],"no-negated-in-lhs",["48"],"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","Assign object to a variable before exporting as module default","no-global-assign","no-unsafe-negation"]